/* tslint:disable */
//----------------------
// <auto-generated>
//     Generated using the NSwag toolchain v8.2.6201.33765 (NJsonSchema v7.0.6201.32793) (http://NSwag.org)
// </auto-generated>
//----------------------

import 'rxjs/Rx'; 
import {Observable} from 'rxjs/Observable';
import {Injectable, Inject, Optional, OpaqueToken} from '@angular/core';
import {Http, Headers, Response, RequestOptionsArgs} from '@angular/http';

export const API_BASE_URL = new OpaqueToken('API_BASE_URL');

export interface IClient {
    /**
     * @return Success
     */
    apiHeroesGet(): Observable<Hero[]>;
    /**
     * @return Success
     */
    apiHeroesPost(hero: Hero): Observable<Hero>;
    /**
     * @return Success
     */
    apiHeroesByIdGet(id: number): Observable<Hero>;
    /**
     * @return Success
     */
    apiHeroesByIdPut(id: number, hero: Hero): Observable<Hero>;
    /**
     * @return Success
     */
    apiHeroesByIdDelete(id: number): Observable<void>;
}

@Injectable()
export class Client implements IClient {
    private http: Http = null; 
    private baseUrl: string = undefined; 
    protected jsonParseReviver: (key: string, value: any) => any = undefined;

    constructor(@Inject(Http) http: Http, @Optional() @Inject(API_BASE_URL) baseUrl?: string) {
        this.http = http; 
        this.baseUrl = baseUrl ? baseUrl : ""; 
    }

    /**
     * @return Success
     */
    apiHeroesGet(): Observable<Hero[]> {
        let url_ = this.baseUrl + "/api/Heroes";

        const content_ = "";
        
        return this.http.request(url_, {
            body: content_,
            method: "get",
            headers: new Headers({
                "Content-Type": "application/json; charset=UTF-8"
            })
        }).map((response) => {
            return this.processApiHeroesGet(response);
        }).catch((response: any, caught: any) => {
            if (response instanceof Response) {
                try {
                    return Observable.of(this.processApiHeroesGet(response));
                } catch (e) {
                    return <Observable<Hero[]>><any>Observable.throw(e);
                }
            } else
                return <Observable<Hero[]>><any>Observable.throw(response);
        });
    }

    protected processApiHeroesGet(response: Response): Hero[] {
        const responseText = response.text();
        const status = response.status; 

        if (status === 200) {
            let result200: Hero[] = null;
            let resultData200 = responseText === "" ? null : JSON.parse(responseText, this.jsonParseReviver);
            if (resultData200 && resultData200.constructor === Array) {
                result200 = [];
                for (let item of resultData200)
                    result200.push(Hero.fromJS(item));
            }
            return result200;
        } else if (status !== 200 && status !== 204) {
            this.throwException("An unexpected server error occurred.", status, responseText);
        }
        return null;
    }

    /**
     * @return Success
     */
    apiHeroesPost(hero: Hero): Observable<Hero> {
        let url_ = this.baseUrl + "/api/Heroes";

        const content_ = JSON.stringify(hero ? hero.toJS() : null);
        
        return this.http.request(url_, {
            body: content_,
            method: "post",
            headers: new Headers({
                "Content-Type": "application/json; charset=UTF-8"
            })
        }).map((response) => {
            return this.processApiHeroesPost(response);
        }).catch((response: any, caught: any) => {
            if (response instanceof Response) {
                try {
                    return Observable.of(this.processApiHeroesPost(response));
                } catch (e) {
                    return <Observable<Hero>><any>Observable.throw(e);
                }
            } else
                return <Observable<Hero>><any>Observable.throw(response);
        });
    }

    protected processApiHeroesPost(response: Response): Hero {
        const responseText = response.text();
        const status = response.status; 

        if (status === 200) {
            let result200: Hero = null;
            let resultData200 = responseText === "" ? null : JSON.parse(responseText, this.jsonParseReviver);
            result200 = resultData200 ? Hero.fromJS(resultData200) : new Hero();
            return result200;
        } else if (status !== 200 && status !== 204) {
            this.throwException("An unexpected server error occurred.", status, responseText);
        }
        return null;
    }

    /**
     * @return Success
     */
    apiHeroesByIdGet(id: number): Observable<Hero> {
        let url_ = this.baseUrl + "/api/Heroes/{id}"; 
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));

        const content_ = "";
        
        return this.http.request(url_, {
            body: content_,
            method: "get",
            headers: new Headers({
                "Content-Type": "application/json; charset=UTF-8"
            })
        }).map((response) => {
            return this.processApiHeroesByIdGet(response);
        }).catch((response: any, caught: any) => {
            if (response instanceof Response) {
                try {
                    return Observable.of(this.processApiHeroesByIdGet(response));
                } catch (e) {
                    return <Observable<Hero>><any>Observable.throw(e);
                }
            } else
                return <Observable<Hero>><any>Observable.throw(response);
        });
    }

    protected processApiHeroesByIdGet(response: Response): Hero {
        const responseText = response.text();
        const status = response.status; 

        if (status === 200) {
            let result200: Hero = null;
            let resultData200 = responseText === "" ? null : JSON.parse(responseText, this.jsonParseReviver);
            result200 = resultData200 ? Hero.fromJS(resultData200) : new Hero();
            return result200;
        } else if (status !== 200 && status !== 204) {
            this.throwException("An unexpected server error occurred.", status, responseText);
        }
        return null;
    }

    /**
     * @return Success
     */
    apiHeroesByIdPut(id: number, hero: Hero): Observable<Hero> {
        let url_ = this.baseUrl + "/api/Heroes/{id}"; 
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));

        const content_ = JSON.stringify(hero ? hero.toJS() : null);
        
        return this.http.request(url_, {
            body: content_,
            method: "put",
            headers: new Headers({
                "Content-Type": "application/json; charset=UTF-8"
            })
        }).map((response) => {
            return this.processApiHeroesByIdPut(response);
        }).catch((response: any, caught: any) => {
            if (response instanceof Response) {
                try {
                    return Observable.of(this.processApiHeroesByIdPut(response));
                } catch (e) {
                    return <Observable<Hero>><any>Observable.throw(e);
                }
            } else
                return <Observable<Hero>><any>Observable.throw(response);
        });
    }

    protected processApiHeroesByIdPut(response: Response): Hero {
        const responseText = response.text();
        const status = response.status; 

        if (status === 200) {
            let result200: Hero = null;
            let resultData200 = responseText === "" ? null : JSON.parse(responseText, this.jsonParseReviver);
            result200 = resultData200 ? Hero.fromJS(resultData200) : new Hero();
            return result200;
        } else if (status !== 200 && status !== 204) {
            this.throwException("An unexpected server error occurred.", status, responseText);
        }
        return null;
    }

    /**
     * @return Success
     */
    apiHeroesByIdDelete(id: number): Observable<void> {
        let url_ = this.baseUrl + "/api/Heroes/{id}"; 
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));

        const content_ = "";
        
        return this.http.request(url_, {
            body: content_,
            method: "delete",
            headers: new Headers({
                "Content-Type": "application/json; charset=UTF-8"
            })
        }).map((response) => {
            return this.processApiHeroesByIdDelete(response);
        }).catch((response: any, caught: any) => {
            if (response instanceof Response) {
                try {
                    return Observable.of(this.processApiHeroesByIdDelete(response));
                } catch (e) {
                    return <Observable<void>><any>Observable.throw(e);
                }
            } else
                return <Observable<void>><any>Observable.throw(response);
        });
    }

    protected processApiHeroesByIdDelete(response: Response): void {
        const responseText = response.text();
        const status = response.status; 

        if (status === 200) {
            return null;
        } else if (status !== 200 && status !== 204) {
            this.throwException("An unexpected server error occurred.", status, responseText);
        }
        return null;
    }

    protected throwException(message: string, status: number, response: string, result?: any): any {
        if(result !== null && result !== undefined)
            throw result;
        else
            throw new SwaggerException(message, status, response);
    }
}

export class Hero { 
    id: number; 
    name: string;

    constructor(data?: any) {
        if (data !== undefined) {
            this.id = data["id"] !== undefined ? data["id"] : null;
            this.name = data["name"] !== undefined ? data["name"] : null;
        }
    }

    static fromJS(data: any): Hero {
        return new Hero(data);
    }

    toJS(data?: any) {
        data = data === undefined ? {} : data;
        data["id"] = this.id !== undefined ? this.id : null;
        data["name"] = this.name !== undefined ? this.name : null;
        return data; 
    }

    toJSON() {
        return JSON.stringify(this.toJS());
    }

    clone() {
        const json = this.toJSON();
        return new Hero(JSON.parse(json));
    }
}

export class SwaggerException extends Error {
    message: string;
    status: number; 
    response: string; 
    result: any; 

    constructor(message: string, status: number, response: string, result?: any) {
        super();

        this.message = message;
        this.status = status;
        this.response = response;
        this.result = result;
    }
}